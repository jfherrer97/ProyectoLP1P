Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> block
Rule 2     block -> statementList
Rule 3     elements -> expression
Rule 4     elements -> expression COMMA elements
Rule 5     statement -> PRINT LPAREN STRING RPAREN
Rule 6     statement -> PRINT LPAREN expression RPAREN
Rule 7     statement -> PRINT LPAREN expression COMMA STRING COMMA expression RPAREN
Rule 8     statement -> ID DOT APPEND LPAREN expression RPAREN
Rule 9     statement -> ID EQUALS expression
Rule 10    statement -> IF condition LBRACE statementList RBRACE statementIF
Rule 11    statement -> WHILE condition LBRACE statementList RBRACE
Rule 12    statement -> FOR ID IN ID LBRACE statementList RBRACE
Rule 13    statement -> empty
Rule 14    statementIF -> ELSE LBRACE statementList RBRACE
Rule 15    statementIF -> ELSE IF condition LBRACE statementList RBRACE statementIF
Rule 16    statementIF -> empty
Rule 17    statementList -> statement
Rule 18    statementList -> statement statementList
Rule 19    condition -> expression relation expression
Rule 20    condition -> expression relation expression relation expression relation expression
Rule 21    relation -> AND
Rule 22    relation -> EQUALV
Rule 23    relation -> NOTEQUALV
Rule 24    relation -> LT
Rule 25    relation -> GT
Rule 26    relation -> LTE
Rule 27    relation -> GTE
Rule 28    relation -> NOT IN
Rule 29    expression -> term
Rule 30    factor -> ID DOT ISALPHA LPAREN RPAREN
Rule 31    term -> factor
Rule 32    factor -> ID
Rule 33    factor -> STRING
Rule 34    factor -> LBRACKET elements RBRACKET
Rule 35    factor -> LBRACKET RBRACKET
Rule 36    factor -> INPUT LPAREN STRING RPAREN
Rule 37    factor -> NUMBER
Rule 38    factor -> FALSE
Rule 39    factor -> TRUE
Rule 40    empty -> <empty>

Terminals, with rules where they appear

AND                  : 21
APPEND               : 8
COMMA                : 4 7 7
COMMENT              : 
DOT                  : 8 30
ELSE                 : 14 15
EQUALS               : 9
EQUALV               : 22
FALSE                : 38
FOR                  : 12
GT                   : 25
GTE                  : 27
ID                   : 8 9 12 12 30 32
IF                   : 10 15
IN                   : 12 28
INPUT                : 36
ISALPHA              : 30
LBRACE               : 10 11 12 14 15
LBRACKET             : 34 35
LPAREN               : 5 6 7 8 30 36
LT                   : 24
LTE                  : 26
NOT                  : 28
NOTEQUALV            : 23
NUMBER               : 37
PRINT                : 5 6 7
RBRACE               : 10 11 12 14 15
RBRACKET             : 34 35
RPAREN               : 5 6 7 8 30 36
STRING               : 5 7 33 36
TRUE                 : 39
WHILE                : 11
error                : 

Nonterminals, with rules where they appear

block                : 1
condition            : 10 11 15
elements             : 4 34
empty                : 13 16
expression           : 3 4 6 7 7 8 9 19 19 20 20 20 20
factor               : 31
program              : 0
relation             : 19 20 20 20
statement            : 17 18
statementIF          : 10 15
statementList        : 2 10 11 12 14 15 18
term                 : 29

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . block
    (2) block -> . statementList
    (17) statementList -> . statement
    (18) statementList -> . statement statementList
    (5) statement -> . PRINT LPAREN STRING RPAREN
    (6) statement -> . PRINT LPAREN expression RPAREN
    (7) statement -> . PRINT LPAREN expression COMMA STRING COMMA expression RPAREN
    (8) statement -> . ID DOT APPEND LPAREN expression RPAREN
    (9) statement -> . ID EQUALS expression
    (10) statement -> . IF condition LBRACE statementList RBRACE statementIF
    (11) statement -> . WHILE condition LBRACE statementList RBRACE
    (12) statement -> . FOR ID IN ID LBRACE statementList RBRACE
    (13) statement -> . empty
    (40) empty -> .

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    PRINT           shift and go to state 5
    ID              shift and go to state 6
    IF              shift and go to state 7
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    $end            reduce using rule 40 (empty -> .)

  ! PRINT           [ reduce using rule 40 (empty -> .) ]
  ! ID              [ reduce using rule 40 (empty -> .) ]
  ! IF              [ reduce using rule 40 (empty -> .) ]
  ! WHILE           [ reduce using rule 40 (empty -> .) ]
  ! FOR             [ reduce using rule 40 (empty -> .) ]

    program                        shift and go to state 1
    block                          shift and go to state 2
    statementList                  shift and go to state 3
    statement                      shift and go to state 4
    empty                          shift and go to state 10

state 1

    (0) S' -> program .



state 2

    (1) program -> block .

    $end            reduce using rule 1 (program -> block .)


state 3

    (2) block -> statementList .

    $end            reduce using rule 2 (block -> statementList .)


state 4

    (17) statementList -> statement .
    (18) statementList -> statement . statementList
    (17) statementList -> . statement
    (18) statementList -> . statement statementList
    (5) statement -> . PRINT LPAREN STRING RPAREN
    (6) statement -> . PRINT LPAREN expression RPAREN
    (7) statement -> . PRINT LPAREN expression COMMA STRING COMMA expression RPAREN
    (8) statement -> . ID DOT APPEND LPAREN expression RPAREN
    (9) statement -> . ID EQUALS expression
    (10) statement -> . IF condition LBRACE statementList RBRACE statementIF
    (11) statement -> . WHILE condition LBRACE statementList RBRACE
    (12) statement -> . FOR ID IN ID LBRACE statementList RBRACE
    (13) statement -> . empty
    (40) empty -> .

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 17 (statementList -> statement .)
  ! reduce/reduce conflict for RBRACE resolved using rule 17 (statementList -> statement .)
    $end            reduce using rule 17 (statementList -> statement .)
    RBRACE          reduce using rule 17 (statementList -> statement .)
    PRINT           shift and go to state 5
    ID              shift and go to state 6
    IF              shift and go to state 7
    WHILE           shift and go to state 8
    FOR             shift and go to state 9

  ! PRINT           [ reduce using rule 40 (empty -> .) ]
  ! ID              [ reduce using rule 40 (empty -> .) ]
  ! IF              [ reduce using rule 40 (empty -> .) ]
  ! WHILE           [ reduce using rule 40 (empty -> .) ]
  ! FOR             [ reduce using rule 40 (empty -> .) ]
  ! $end            [ reduce using rule 40 (empty -> .) ]
  ! RBRACE          [ reduce using rule 40 (empty -> .) ]

    statement                      shift and go to state 4
    statementList                  shift and go to state 11
    empty                          shift and go to state 10

state 5

    (5) statement -> PRINT . LPAREN STRING RPAREN
    (6) statement -> PRINT . LPAREN expression RPAREN
    (7) statement -> PRINT . LPAREN expression COMMA STRING COMMA expression RPAREN

    LPAREN          shift and go to state 12


state 6

    (8) statement -> ID . DOT APPEND LPAREN expression RPAREN
    (9) statement -> ID . EQUALS expression

    DOT             shift and go to state 13
    EQUALS          shift and go to state 14


state 7

    (10) statement -> IF . condition LBRACE statementList RBRACE statementIF
    (19) condition -> . expression relation expression
    (20) condition -> . expression relation expression relation expression relation expression
    (29) expression -> . term
    (31) term -> . factor
    (30) factor -> . ID DOT ISALPHA LPAREN RPAREN
    (32) factor -> . ID
    (33) factor -> . STRING
    (34) factor -> . LBRACKET elements RBRACKET
    (35) factor -> . LBRACKET RBRACKET
    (36) factor -> . INPUT LPAREN STRING RPAREN
    (37) factor -> . NUMBER
    (38) factor -> . FALSE
    (39) factor -> . TRUE

    ID              shift and go to state 19
    STRING          shift and go to state 20
    LBRACKET        shift and go to state 21
    INPUT           shift and go to state 22
    NUMBER          shift and go to state 23
    FALSE           shift and go to state 24
    TRUE            shift and go to state 25

    condition                      shift and go to state 15
    expression                     shift and go to state 16
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 8

    (11) statement -> WHILE . condition LBRACE statementList RBRACE
    (19) condition -> . expression relation expression
    (20) condition -> . expression relation expression relation expression relation expression
    (29) expression -> . term
    (31) term -> . factor
    (30) factor -> . ID DOT ISALPHA LPAREN RPAREN
    (32) factor -> . ID
    (33) factor -> . STRING
    (34) factor -> . LBRACKET elements RBRACKET
    (35) factor -> . LBRACKET RBRACKET
    (36) factor -> . INPUT LPAREN STRING RPAREN
    (37) factor -> . NUMBER
    (38) factor -> . FALSE
    (39) factor -> . TRUE

    ID              shift and go to state 19
    STRING          shift and go to state 20
    LBRACKET        shift and go to state 21
    INPUT           shift and go to state 22
    NUMBER          shift and go to state 23
    FALSE           shift and go to state 24
    TRUE            shift and go to state 25

    condition                      shift and go to state 26
    expression                     shift and go to state 16
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 9

    (12) statement -> FOR . ID IN ID LBRACE statementList RBRACE

    ID              shift and go to state 27


state 10

    (13) statement -> empty .

    PRINT           reduce using rule 13 (statement -> empty .)
    ID              reduce using rule 13 (statement -> empty .)
    IF              reduce using rule 13 (statement -> empty .)
    WHILE           reduce using rule 13 (statement -> empty .)
    FOR             reduce using rule 13 (statement -> empty .)
    $end            reduce using rule 13 (statement -> empty .)
    RBRACE          reduce using rule 13 (statement -> empty .)


state 11

    (18) statementList -> statement statementList .

    $end            reduce using rule 18 (statementList -> statement statementList .)
    RBRACE          reduce using rule 18 (statementList -> statement statementList .)


state 12

    (5) statement -> PRINT LPAREN . STRING RPAREN
    (6) statement -> PRINT LPAREN . expression RPAREN
    (7) statement -> PRINT LPAREN . expression COMMA STRING COMMA expression RPAREN
    (29) expression -> . term
    (31) term -> . factor
    (30) factor -> . ID DOT ISALPHA LPAREN RPAREN
    (32) factor -> . ID
    (33) factor -> . STRING
    (34) factor -> . LBRACKET elements RBRACKET
    (35) factor -> . LBRACKET RBRACKET
    (36) factor -> . INPUT LPAREN STRING RPAREN
    (37) factor -> . NUMBER
    (38) factor -> . FALSE
    (39) factor -> . TRUE

    STRING          shift and go to state 28
    ID              shift and go to state 19
    LBRACKET        shift and go to state 21
    INPUT           shift and go to state 22
    NUMBER          shift and go to state 23
    FALSE           shift and go to state 24
    TRUE            shift and go to state 25

    expression                     shift and go to state 29
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 13

    (8) statement -> ID DOT . APPEND LPAREN expression RPAREN

    APPEND          shift and go to state 30


state 14

    (9) statement -> ID EQUALS . expression
    (29) expression -> . term
    (31) term -> . factor
    (30) factor -> . ID DOT ISALPHA LPAREN RPAREN
    (32) factor -> . ID
    (33) factor -> . STRING
    (34) factor -> . LBRACKET elements RBRACKET
    (35) factor -> . LBRACKET RBRACKET
    (36) factor -> . INPUT LPAREN STRING RPAREN
    (37) factor -> . NUMBER
    (38) factor -> . FALSE
    (39) factor -> . TRUE

    ID              shift and go to state 19
    STRING          shift and go to state 20
    LBRACKET        shift and go to state 21
    INPUT           shift and go to state 22
    NUMBER          shift and go to state 23
    FALSE           shift and go to state 24
    TRUE            shift and go to state 25

    expression                     shift and go to state 31
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 15

    (10) statement -> IF condition . LBRACE statementList RBRACE statementIF

    LBRACE          shift and go to state 32


state 16

    (19) condition -> expression . relation expression
    (20) condition -> expression . relation expression relation expression relation expression
    (21) relation -> . AND
    (22) relation -> . EQUALV
    (23) relation -> . NOTEQUALV
    (24) relation -> . LT
    (25) relation -> . GT
    (26) relation -> . LTE
    (27) relation -> . GTE
    (28) relation -> . NOT IN

    AND             shift and go to state 34
    EQUALV          shift and go to state 35
    NOTEQUALV       shift and go to state 36
    LT              shift and go to state 37
    GT              shift and go to state 38
    LTE             shift and go to state 39
    GTE             shift and go to state 40
    NOT             shift and go to state 41

    relation                       shift and go to state 33

state 17

    (29) expression -> term .

    AND             reduce using rule 29 (expression -> term .)
    EQUALV          reduce using rule 29 (expression -> term .)
    NOTEQUALV       reduce using rule 29 (expression -> term .)
    LT              reduce using rule 29 (expression -> term .)
    GT              reduce using rule 29 (expression -> term .)
    LTE             reduce using rule 29 (expression -> term .)
    GTE             reduce using rule 29 (expression -> term .)
    NOT             reduce using rule 29 (expression -> term .)
    RPAREN          reduce using rule 29 (expression -> term .)
    COMMA           reduce using rule 29 (expression -> term .)
    PRINT           reduce using rule 29 (expression -> term .)
    ID              reduce using rule 29 (expression -> term .)
    IF              reduce using rule 29 (expression -> term .)
    WHILE           reduce using rule 29 (expression -> term .)
    FOR             reduce using rule 29 (expression -> term .)
    $end            reduce using rule 29 (expression -> term .)
    RBRACE          reduce using rule 29 (expression -> term .)
    RBRACKET        reduce using rule 29 (expression -> term .)
    LBRACE          reduce using rule 29 (expression -> term .)


state 18

    (31) term -> factor .

    AND             reduce using rule 31 (term -> factor .)
    EQUALV          reduce using rule 31 (term -> factor .)
    NOTEQUALV       reduce using rule 31 (term -> factor .)
    LT              reduce using rule 31 (term -> factor .)
    GT              reduce using rule 31 (term -> factor .)
    LTE             reduce using rule 31 (term -> factor .)
    GTE             reduce using rule 31 (term -> factor .)
    NOT             reduce using rule 31 (term -> factor .)
    RPAREN          reduce using rule 31 (term -> factor .)
    COMMA           reduce using rule 31 (term -> factor .)
    PRINT           reduce using rule 31 (term -> factor .)
    ID              reduce using rule 31 (term -> factor .)
    IF              reduce using rule 31 (term -> factor .)
    WHILE           reduce using rule 31 (term -> factor .)
    FOR             reduce using rule 31 (term -> factor .)
    $end            reduce using rule 31 (term -> factor .)
    RBRACE          reduce using rule 31 (term -> factor .)
    RBRACKET        reduce using rule 31 (term -> factor .)
    LBRACE          reduce using rule 31 (term -> factor .)


state 19

    (30) factor -> ID . DOT ISALPHA LPAREN RPAREN
    (32) factor -> ID .

    DOT             shift and go to state 42
    AND             reduce using rule 32 (factor -> ID .)
    EQUALV          reduce using rule 32 (factor -> ID .)
    NOTEQUALV       reduce using rule 32 (factor -> ID .)
    LT              reduce using rule 32 (factor -> ID .)
    GT              reduce using rule 32 (factor -> ID .)
    LTE             reduce using rule 32 (factor -> ID .)
    GTE             reduce using rule 32 (factor -> ID .)
    NOT             reduce using rule 32 (factor -> ID .)
    RPAREN          reduce using rule 32 (factor -> ID .)
    COMMA           reduce using rule 32 (factor -> ID .)
    PRINT           reduce using rule 32 (factor -> ID .)
    ID              reduce using rule 32 (factor -> ID .)
    IF              reduce using rule 32 (factor -> ID .)
    WHILE           reduce using rule 32 (factor -> ID .)
    FOR             reduce using rule 32 (factor -> ID .)
    $end            reduce using rule 32 (factor -> ID .)
    RBRACE          reduce using rule 32 (factor -> ID .)
    RBRACKET        reduce using rule 32 (factor -> ID .)
    LBRACE          reduce using rule 32 (factor -> ID .)


state 20

    (33) factor -> STRING .

    AND             reduce using rule 33 (factor -> STRING .)
    EQUALV          reduce using rule 33 (factor -> STRING .)
    NOTEQUALV       reduce using rule 33 (factor -> STRING .)
    LT              reduce using rule 33 (factor -> STRING .)
    GT              reduce using rule 33 (factor -> STRING .)
    LTE             reduce using rule 33 (factor -> STRING .)
    GTE             reduce using rule 33 (factor -> STRING .)
    NOT             reduce using rule 33 (factor -> STRING .)
    PRINT           reduce using rule 33 (factor -> STRING .)
    ID              reduce using rule 33 (factor -> STRING .)
    IF              reduce using rule 33 (factor -> STRING .)
    WHILE           reduce using rule 33 (factor -> STRING .)
    FOR             reduce using rule 33 (factor -> STRING .)
    $end            reduce using rule 33 (factor -> STRING .)
    RBRACE          reduce using rule 33 (factor -> STRING .)
    COMMA           reduce using rule 33 (factor -> STRING .)
    RBRACKET        reduce using rule 33 (factor -> STRING .)
    LBRACE          reduce using rule 33 (factor -> STRING .)
    RPAREN          reduce using rule 33 (factor -> STRING .)


state 21

    (34) factor -> LBRACKET . elements RBRACKET
    (35) factor -> LBRACKET . RBRACKET
    (3) elements -> . expression
    (4) elements -> . expression COMMA elements
    (29) expression -> . term
    (31) term -> . factor
    (30) factor -> . ID DOT ISALPHA LPAREN RPAREN
    (32) factor -> . ID
    (33) factor -> . STRING
    (34) factor -> . LBRACKET elements RBRACKET
    (35) factor -> . LBRACKET RBRACKET
    (36) factor -> . INPUT LPAREN STRING RPAREN
    (37) factor -> . NUMBER
    (38) factor -> . FALSE
    (39) factor -> . TRUE

    RBRACKET        shift and go to state 44
    ID              shift and go to state 19
    STRING          shift and go to state 20
    LBRACKET        shift and go to state 21
    INPUT           shift and go to state 22
    NUMBER          shift and go to state 23
    FALSE           shift and go to state 24
    TRUE            shift and go to state 25

    elements                       shift and go to state 43
    expression                     shift and go to state 45
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 22

    (36) factor -> INPUT . LPAREN STRING RPAREN

    LPAREN          shift and go to state 46


state 23

    (37) factor -> NUMBER .

    AND             reduce using rule 37 (factor -> NUMBER .)
    EQUALV          reduce using rule 37 (factor -> NUMBER .)
    NOTEQUALV       reduce using rule 37 (factor -> NUMBER .)
    LT              reduce using rule 37 (factor -> NUMBER .)
    GT              reduce using rule 37 (factor -> NUMBER .)
    LTE             reduce using rule 37 (factor -> NUMBER .)
    GTE             reduce using rule 37 (factor -> NUMBER .)
    NOT             reduce using rule 37 (factor -> NUMBER .)
    RPAREN          reduce using rule 37 (factor -> NUMBER .)
    COMMA           reduce using rule 37 (factor -> NUMBER .)
    PRINT           reduce using rule 37 (factor -> NUMBER .)
    ID              reduce using rule 37 (factor -> NUMBER .)
    IF              reduce using rule 37 (factor -> NUMBER .)
    WHILE           reduce using rule 37 (factor -> NUMBER .)
    FOR             reduce using rule 37 (factor -> NUMBER .)
    $end            reduce using rule 37 (factor -> NUMBER .)
    RBRACE          reduce using rule 37 (factor -> NUMBER .)
    RBRACKET        reduce using rule 37 (factor -> NUMBER .)
    LBRACE          reduce using rule 37 (factor -> NUMBER .)


state 24

    (38) factor -> FALSE .

    AND             reduce using rule 38 (factor -> FALSE .)
    EQUALV          reduce using rule 38 (factor -> FALSE .)
    NOTEQUALV       reduce using rule 38 (factor -> FALSE .)
    LT              reduce using rule 38 (factor -> FALSE .)
    GT              reduce using rule 38 (factor -> FALSE .)
    LTE             reduce using rule 38 (factor -> FALSE .)
    GTE             reduce using rule 38 (factor -> FALSE .)
    NOT             reduce using rule 38 (factor -> FALSE .)
    RPAREN          reduce using rule 38 (factor -> FALSE .)
    COMMA           reduce using rule 38 (factor -> FALSE .)
    PRINT           reduce using rule 38 (factor -> FALSE .)
    ID              reduce using rule 38 (factor -> FALSE .)
    IF              reduce using rule 38 (factor -> FALSE .)
    WHILE           reduce using rule 38 (factor -> FALSE .)
    FOR             reduce using rule 38 (factor -> FALSE .)
    $end            reduce using rule 38 (factor -> FALSE .)
    RBRACE          reduce using rule 38 (factor -> FALSE .)
    RBRACKET        reduce using rule 38 (factor -> FALSE .)
    LBRACE          reduce using rule 38 (factor -> FALSE .)


state 25

    (39) factor -> TRUE .

    AND             reduce using rule 39 (factor -> TRUE .)
    EQUALV          reduce using rule 39 (factor -> TRUE .)
    NOTEQUALV       reduce using rule 39 (factor -> TRUE .)
    LT              reduce using rule 39 (factor -> TRUE .)
    GT              reduce using rule 39 (factor -> TRUE .)
    LTE             reduce using rule 39 (factor -> TRUE .)
    GTE             reduce using rule 39 (factor -> TRUE .)
    NOT             reduce using rule 39 (factor -> TRUE .)
    RPAREN          reduce using rule 39 (factor -> TRUE .)
    COMMA           reduce using rule 39 (factor -> TRUE .)
    PRINT           reduce using rule 39 (factor -> TRUE .)
    ID              reduce using rule 39 (factor -> TRUE .)
    IF              reduce using rule 39 (factor -> TRUE .)
    WHILE           reduce using rule 39 (factor -> TRUE .)
    FOR             reduce using rule 39 (factor -> TRUE .)
    $end            reduce using rule 39 (factor -> TRUE .)
    RBRACE          reduce using rule 39 (factor -> TRUE .)
    RBRACKET        reduce using rule 39 (factor -> TRUE .)
    LBRACE          reduce using rule 39 (factor -> TRUE .)


state 26

    (11) statement -> WHILE condition . LBRACE statementList RBRACE

    LBRACE          shift and go to state 47


state 27

    (12) statement -> FOR ID . IN ID LBRACE statementList RBRACE

    IN              shift and go to state 48


state 28

    (5) statement -> PRINT LPAREN STRING . RPAREN
    (33) factor -> STRING .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 49
    COMMA           reduce using rule 33 (factor -> STRING .)

  ! RPAREN          [ reduce using rule 33 (factor -> STRING .) ]


state 29

    (6) statement -> PRINT LPAREN expression . RPAREN
    (7) statement -> PRINT LPAREN expression . COMMA STRING COMMA expression RPAREN

    RPAREN          shift and go to state 50
    COMMA           shift and go to state 51


state 30

    (8) statement -> ID DOT APPEND . LPAREN expression RPAREN

    LPAREN          shift and go to state 52


state 31

    (9) statement -> ID EQUALS expression .

    PRINT           reduce using rule 9 (statement -> ID EQUALS expression .)
    ID              reduce using rule 9 (statement -> ID EQUALS expression .)
    IF              reduce using rule 9 (statement -> ID EQUALS expression .)
    WHILE           reduce using rule 9 (statement -> ID EQUALS expression .)
    FOR             reduce using rule 9 (statement -> ID EQUALS expression .)
    $end            reduce using rule 9 (statement -> ID EQUALS expression .)
    RBRACE          reduce using rule 9 (statement -> ID EQUALS expression .)


state 32

    (10) statement -> IF condition LBRACE . statementList RBRACE statementIF
    (17) statementList -> . statement
    (18) statementList -> . statement statementList
    (5) statement -> . PRINT LPAREN STRING RPAREN
    (6) statement -> . PRINT LPAREN expression RPAREN
    (7) statement -> . PRINT LPAREN expression COMMA STRING COMMA expression RPAREN
    (8) statement -> . ID DOT APPEND LPAREN expression RPAREN
    (9) statement -> . ID EQUALS expression
    (10) statement -> . IF condition LBRACE statementList RBRACE statementIF
    (11) statement -> . WHILE condition LBRACE statementList RBRACE
    (12) statement -> . FOR ID IN ID LBRACE statementList RBRACE
    (13) statement -> . empty
    (40) empty -> .

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    PRINT           shift and go to state 5
    ID              shift and go to state 6
    IF              shift and go to state 7
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    RBRACE          reduce using rule 40 (empty -> .)

  ! PRINT           [ reduce using rule 40 (empty -> .) ]
  ! ID              [ reduce using rule 40 (empty -> .) ]
  ! IF              [ reduce using rule 40 (empty -> .) ]
  ! WHILE           [ reduce using rule 40 (empty -> .) ]
  ! FOR             [ reduce using rule 40 (empty -> .) ]

    statementList                  shift and go to state 53
    statement                      shift and go to state 4
    empty                          shift and go to state 10

state 33

    (19) condition -> expression relation . expression
    (20) condition -> expression relation . expression relation expression relation expression
    (29) expression -> . term
    (31) term -> . factor
    (30) factor -> . ID DOT ISALPHA LPAREN RPAREN
    (32) factor -> . ID
    (33) factor -> . STRING
    (34) factor -> . LBRACKET elements RBRACKET
    (35) factor -> . LBRACKET RBRACKET
    (36) factor -> . INPUT LPAREN STRING RPAREN
    (37) factor -> . NUMBER
    (38) factor -> . FALSE
    (39) factor -> . TRUE

    ID              shift and go to state 19
    STRING          shift and go to state 20
    LBRACKET        shift and go to state 21
    INPUT           shift and go to state 22
    NUMBER          shift and go to state 23
    FALSE           shift and go to state 24
    TRUE            shift and go to state 25

    expression                     shift and go to state 54
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 34

    (21) relation -> AND .

    ID              reduce using rule 21 (relation -> AND .)
    STRING          reduce using rule 21 (relation -> AND .)
    LBRACKET        reduce using rule 21 (relation -> AND .)
    INPUT           reduce using rule 21 (relation -> AND .)
    NUMBER          reduce using rule 21 (relation -> AND .)
    FALSE           reduce using rule 21 (relation -> AND .)
    TRUE            reduce using rule 21 (relation -> AND .)


state 35

    (22) relation -> EQUALV .

    ID              reduce using rule 22 (relation -> EQUALV .)
    STRING          reduce using rule 22 (relation -> EQUALV .)
    LBRACKET        reduce using rule 22 (relation -> EQUALV .)
    INPUT           reduce using rule 22 (relation -> EQUALV .)
    NUMBER          reduce using rule 22 (relation -> EQUALV .)
    FALSE           reduce using rule 22 (relation -> EQUALV .)
    TRUE            reduce using rule 22 (relation -> EQUALV .)


state 36

    (23) relation -> NOTEQUALV .

    ID              reduce using rule 23 (relation -> NOTEQUALV .)
    STRING          reduce using rule 23 (relation -> NOTEQUALV .)
    LBRACKET        reduce using rule 23 (relation -> NOTEQUALV .)
    INPUT           reduce using rule 23 (relation -> NOTEQUALV .)
    NUMBER          reduce using rule 23 (relation -> NOTEQUALV .)
    FALSE           reduce using rule 23 (relation -> NOTEQUALV .)
    TRUE            reduce using rule 23 (relation -> NOTEQUALV .)


state 37

    (24) relation -> LT .

    ID              reduce using rule 24 (relation -> LT .)
    STRING          reduce using rule 24 (relation -> LT .)
    LBRACKET        reduce using rule 24 (relation -> LT .)
    INPUT           reduce using rule 24 (relation -> LT .)
    NUMBER          reduce using rule 24 (relation -> LT .)
    FALSE           reduce using rule 24 (relation -> LT .)
    TRUE            reduce using rule 24 (relation -> LT .)


state 38

    (25) relation -> GT .

    ID              reduce using rule 25 (relation -> GT .)
    STRING          reduce using rule 25 (relation -> GT .)
    LBRACKET        reduce using rule 25 (relation -> GT .)
    INPUT           reduce using rule 25 (relation -> GT .)
    NUMBER          reduce using rule 25 (relation -> GT .)
    FALSE           reduce using rule 25 (relation -> GT .)
    TRUE            reduce using rule 25 (relation -> GT .)


state 39

    (26) relation -> LTE .

    ID              reduce using rule 26 (relation -> LTE .)
    STRING          reduce using rule 26 (relation -> LTE .)
    LBRACKET        reduce using rule 26 (relation -> LTE .)
    INPUT           reduce using rule 26 (relation -> LTE .)
    NUMBER          reduce using rule 26 (relation -> LTE .)
    FALSE           reduce using rule 26 (relation -> LTE .)
    TRUE            reduce using rule 26 (relation -> LTE .)


state 40

    (27) relation -> GTE .

    ID              reduce using rule 27 (relation -> GTE .)
    STRING          reduce using rule 27 (relation -> GTE .)
    LBRACKET        reduce using rule 27 (relation -> GTE .)
    INPUT           reduce using rule 27 (relation -> GTE .)
    NUMBER          reduce using rule 27 (relation -> GTE .)
    FALSE           reduce using rule 27 (relation -> GTE .)
    TRUE            reduce using rule 27 (relation -> GTE .)


state 41

    (28) relation -> NOT . IN

    IN              shift and go to state 55


state 42

    (30) factor -> ID DOT . ISALPHA LPAREN RPAREN

    ISALPHA         shift and go to state 56


state 43

    (34) factor -> LBRACKET elements . RBRACKET

    RBRACKET        shift and go to state 57


state 44

    (35) factor -> LBRACKET RBRACKET .

    AND             reduce using rule 35 (factor -> LBRACKET RBRACKET .)
    EQUALV          reduce using rule 35 (factor -> LBRACKET RBRACKET .)
    NOTEQUALV       reduce using rule 35 (factor -> LBRACKET RBRACKET .)
    LT              reduce using rule 35 (factor -> LBRACKET RBRACKET .)
    GT              reduce using rule 35 (factor -> LBRACKET RBRACKET .)
    LTE             reduce using rule 35 (factor -> LBRACKET RBRACKET .)
    GTE             reduce using rule 35 (factor -> LBRACKET RBRACKET .)
    NOT             reduce using rule 35 (factor -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 35 (factor -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 35 (factor -> LBRACKET RBRACKET .)
    PRINT           reduce using rule 35 (factor -> LBRACKET RBRACKET .)
    ID              reduce using rule 35 (factor -> LBRACKET RBRACKET .)
    IF              reduce using rule 35 (factor -> LBRACKET RBRACKET .)
    WHILE           reduce using rule 35 (factor -> LBRACKET RBRACKET .)
    FOR             reduce using rule 35 (factor -> LBRACKET RBRACKET .)
    $end            reduce using rule 35 (factor -> LBRACKET RBRACKET .)
    RBRACE          reduce using rule 35 (factor -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 35 (factor -> LBRACKET RBRACKET .)
    LBRACE          reduce using rule 35 (factor -> LBRACKET RBRACKET .)


state 45

    (3) elements -> expression .
    (4) elements -> expression . COMMA elements

    RBRACKET        reduce using rule 3 (elements -> expression .)
    COMMA           shift and go to state 58


state 46

    (36) factor -> INPUT LPAREN . STRING RPAREN

    STRING          shift and go to state 59


state 47

    (11) statement -> WHILE condition LBRACE . statementList RBRACE
    (17) statementList -> . statement
    (18) statementList -> . statement statementList
    (5) statement -> . PRINT LPAREN STRING RPAREN
    (6) statement -> . PRINT LPAREN expression RPAREN
    (7) statement -> . PRINT LPAREN expression COMMA STRING COMMA expression RPAREN
    (8) statement -> . ID DOT APPEND LPAREN expression RPAREN
    (9) statement -> . ID EQUALS expression
    (10) statement -> . IF condition LBRACE statementList RBRACE statementIF
    (11) statement -> . WHILE condition LBRACE statementList RBRACE
    (12) statement -> . FOR ID IN ID LBRACE statementList RBRACE
    (13) statement -> . empty
    (40) empty -> .

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    PRINT           shift and go to state 5
    ID              shift and go to state 6
    IF              shift and go to state 7
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    RBRACE          reduce using rule 40 (empty -> .)

  ! PRINT           [ reduce using rule 40 (empty -> .) ]
  ! ID              [ reduce using rule 40 (empty -> .) ]
  ! IF              [ reduce using rule 40 (empty -> .) ]
  ! WHILE           [ reduce using rule 40 (empty -> .) ]
  ! FOR             [ reduce using rule 40 (empty -> .) ]

    statementList                  shift and go to state 60
    statement                      shift and go to state 4
    empty                          shift and go to state 10

state 48

    (12) statement -> FOR ID IN . ID LBRACE statementList RBRACE

    ID              shift and go to state 61


state 49

    (5) statement -> PRINT LPAREN STRING RPAREN .

    PRINT           reduce using rule 5 (statement -> PRINT LPAREN STRING RPAREN .)
    ID              reduce using rule 5 (statement -> PRINT LPAREN STRING RPAREN .)
    IF              reduce using rule 5 (statement -> PRINT LPAREN STRING RPAREN .)
    WHILE           reduce using rule 5 (statement -> PRINT LPAREN STRING RPAREN .)
    FOR             reduce using rule 5 (statement -> PRINT LPAREN STRING RPAREN .)
    $end            reduce using rule 5 (statement -> PRINT LPAREN STRING RPAREN .)
    RBRACE          reduce using rule 5 (statement -> PRINT LPAREN STRING RPAREN .)


state 50

    (6) statement -> PRINT LPAREN expression RPAREN .

    PRINT           reduce using rule 6 (statement -> PRINT LPAREN expression RPAREN .)
    ID              reduce using rule 6 (statement -> PRINT LPAREN expression RPAREN .)
    IF              reduce using rule 6 (statement -> PRINT LPAREN expression RPAREN .)
    WHILE           reduce using rule 6 (statement -> PRINT LPAREN expression RPAREN .)
    FOR             reduce using rule 6 (statement -> PRINT LPAREN expression RPAREN .)
    $end            reduce using rule 6 (statement -> PRINT LPAREN expression RPAREN .)
    RBRACE          reduce using rule 6 (statement -> PRINT LPAREN expression RPAREN .)


state 51

    (7) statement -> PRINT LPAREN expression COMMA . STRING COMMA expression RPAREN

    STRING          shift and go to state 62


state 52

    (8) statement -> ID DOT APPEND LPAREN . expression RPAREN
    (29) expression -> . term
    (31) term -> . factor
    (30) factor -> . ID DOT ISALPHA LPAREN RPAREN
    (32) factor -> . ID
    (33) factor -> . STRING
    (34) factor -> . LBRACKET elements RBRACKET
    (35) factor -> . LBRACKET RBRACKET
    (36) factor -> . INPUT LPAREN STRING RPAREN
    (37) factor -> . NUMBER
    (38) factor -> . FALSE
    (39) factor -> . TRUE

    ID              shift and go to state 19
    STRING          shift and go to state 20
    LBRACKET        shift and go to state 21
    INPUT           shift and go to state 22
    NUMBER          shift and go to state 23
    FALSE           shift and go to state 24
    TRUE            shift and go to state 25

    expression                     shift and go to state 63
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 53

    (10) statement -> IF condition LBRACE statementList . RBRACE statementIF

    RBRACE          shift and go to state 64


state 54

    (19) condition -> expression relation expression .
    (20) condition -> expression relation expression . relation expression relation expression
    (21) relation -> . AND
    (22) relation -> . EQUALV
    (23) relation -> . NOTEQUALV
    (24) relation -> . LT
    (25) relation -> . GT
    (26) relation -> . LTE
    (27) relation -> . GTE
    (28) relation -> . NOT IN

    LBRACE          reduce using rule 19 (condition -> expression relation expression .)
    AND             shift and go to state 34
    EQUALV          shift and go to state 35
    NOTEQUALV       shift and go to state 36
    LT              shift and go to state 37
    GT              shift and go to state 38
    LTE             shift and go to state 39
    GTE             shift and go to state 40
    NOT             shift and go to state 41

    relation                       shift and go to state 65

state 55

    (28) relation -> NOT IN .

    ID              reduce using rule 28 (relation -> NOT IN .)
    STRING          reduce using rule 28 (relation -> NOT IN .)
    LBRACKET        reduce using rule 28 (relation -> NOT IN .)
    INPUT           reduce using rule 28 (relation -> NOT IN .)
    NUMBER          reduce using rule 28 (relation -> NOT IN .)
    FALSE           reduce using rule 28 (relation -> NOT IN .)
    TRUE            reduce using rule 28 (relation -> NOT IN .)


state 56

    (30) factor -> ID DOT ISALPHA . LPAREN RPAREN

    LPAREN          shift and go to state 66


state 57

    (34) factor -> LBRACKET elements RBRACKET .

    AND             reduce using rule 34 (factor -> LBRACKET elements RBRACKET .)
    EQUALV          reduce using rule 34 (factor -> LBRACKET elements RBRACKET .)
    NOTEQUALV       reduce using rule 34 (factor -> LBRACKET elements RBRACKET .)
    LT              reduce using rule 34 (factor -> LBRACKET elements RBRACKET .)
    GT              reduce using rule 34 (factor -> LBRACKET elements RBRACKET .)
    LTE             reduce using rule 34 (factor -> LBRACKET elements RBRACKET .)
    GTE             reduce using rule 34 (factor -> LBRACKET elements RBRACKET .)
    NOT             reduce using rule 34 (factor -> LBRACKET elements RBRACKET .)
    RPAREN          reduce using rule 34 (factor -> LBRACKET elements RBRACKET .)
    COMMA           reduce using rule 34 (factor -> LBRACKET elements RBRACKET .)
    PRINT           reduce using rule 34 (factor -> LBRACKET elements RBRACKET .)
    ID              reduce using rule 34 (factor -> LBRACKET elements RBRACKET .)
    IF              reduce using rule 34 (factor -> LBRACKET elements RBRACKET .)
    WHILE           reduce using rule 34 (factor -> LBRACKET elements RBRACKET .)
    FOR             reduce using rule 34 (factor -> LBRACKET elements RBRACKET .)
    $end            reduce using rule 34 (factor -> LBRACKET elements RBRACKET .)
    RBRACE          reduce using rule 34 (factor -> LBRACKET elements RBRACKET .)
    RBRACKET        reduce using rule 34 (factor -> LBRACKET elements RBRACKET .)
    LBRACE          reduce using rule 34 (factor -> LBRACKET elements RBRACKET .)


state 58

    (4) elements -> expression COMMA . elements
    (3) elements -> . expression
    (4) elements -> . expression COMMA elements
    (29) expression -> . term
    (31) term -> . factor
    (30) factor -> . ID DOT ISALPHA LPAREN RPAREN
    (32) factor -> . ID
    (33) factor -> . STRING
    (34) factor -> . LBRACKET elements RBRACKET
    (35) factor -> . LBRACKET RBRACKET
    (36) factor -> . INPUT LPAREN STRING RPAREN
    (37) factor -> . NUMBER
    (38) factor -> . FALSE
    (39) factor -> . TRUE

    ID              shift and go to state 19
    STRING          shift and go to state 20
    LBRACKET        shift and go to state 21
    INPUT           shift and go to state 22
    NUMBER          shift and go to state 23
    FALSE           shift and go to state 24
    TRUE            shift and go to state 25

    expression                     shift and go to state 45
    elements                       shift and go to state 67
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 59

    (36) factor -> INPUT LPAREN STRING . RPAREN

    RPAREN          shift and go to state 68


state 60

    (11) statement -> WHILE condition LBRACE statementList . RBRACE

    RBRACE          shift and go to state 69


state 61

    (12) statement -> FOR ID IN ID . LBRACE statementList RBRACE

    LBRACE          shift and go to state 70


state 62

    (7) statement -> PRINT LPAREN expression COMMA STRING . COMMA expression RPAREN

    COMMA           shift and go to state 71


state 63

    (8) statement -> ID DOT APPEND LPAREN expression . RPAREN

    RPAREN          shift and go to state 72


state 64

    (10) statement -> IF condition LBRACE statementList RBRACE . statementIF
    (14) statementIF -> . ELSE LBRACE statementList RBRACE
    (15) statementIF -> . ELSE IF condition LBRACE statementList RBRACE statementIF
    (16) statementIF -> . empty
    (40) empty -> .

    ELSE            shift and go to state 74
    PRINT           reduce using rule 40 (empty -> .)
    ID              reduce using rule 40 (empty -> .)
    IF              reduce using rule 40 (empty -> .)
    WHILE           reduce using rule 40 (empty -> .)
    FOR             reduce using rule 40 (empty -> .)
    $end            reduce using rule 40 (empty -> .)
    RBRACE          reduce using rule 40 (empty -> .)

    statementIF                    shift and go to state 73
    empty                          shift and go to state 75

state 65

    (20) condition -> expression relation expression relation . expression relation expression
    (29) expression -> . term
    (31) term -> . factor
    (30) factor -> . ID DOT ISALPHA LPAREN RPAREN
    (32) factor -> . ID
    (33) factor -> . STRING
    (34) factor -> . LBRACKET elements RBRACKET
    (35) factor -> . LBRACKET RBRACKET
    (36) factor -> . INPUT LPAREN STRING RPAREN
    (37) factor -> . NUMBER
    (38) factor -> . FALSE
    (39) factor -> . TRUE

    ID              shift and go to state 19
    STRING          shift and go to state 20
    LBRACKET        shift and go to state 21
    INPUT           shift and go to state 22
    NUMBER          shift and go to state 23
    FALSE           shift and go to state 24
    TRUE            shift and go to state 25

    expression                     shift and go to state 76
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 66

    (30) factor -> ID DOT ISALPHA LPAREN . RPAREN

    RPAREN          shift and go to state 77


state 67

    (4) elements -> expression COMMA elements .

    RBRACKET        reduce using rule 4 (elements -> expression COMMA elements .)


state 68

    (36) factor -> INPUT LPAREN STRING RPAREN .

    AND             reduce using rule 36 (factor -> INPUT LPAREN STRING RPAREN .)
    EQUALV          reduce using rule 36 (factor -> INPUT LPAREN STRING RPAREN .)
    NOTEQUALV       reduce using rule 36 (factor -> INPUT LPAREN STRING RPAREN .)
    LT              reduce using rule 36 (factor -> INPUT LPAREN STRING RPAREN .)
    GT              reduce using rule 36 (factor -> INPUT LPAREN STRING RPAREN .)
    LTE             reduce using rule 36 (factor -> INPUT LPAREN STRING RPAREN .)
    GTE             reduce using rule 36 (factor -> INPUT LPAREN STRING RPAREN .)
    NOT             reduce using rule 36 (factor -> INPUT LPAREN STRING RPAREN .)
    RPAREN          reduce using rule 36 (factor -> INPUT LPAREN STRING RPAREN .)
    COMMA           reduce using rule 36 (factor -> INPUT LPAREN STRING RPAREN .)
    PRINT           reduce using rule 36 (factor -> INPUT LPAREN STRING RPAREN .)
    ID              reduce using rule 36 (factor -> INPUT LPAREN STRING RPAREN .)
    IF              reduce using rule 36 (factor -> INPUT LPAREN STRING RPAREN .)
    WHILE           reduce using rule 36 (factor -> INPUT LPAREN STRING RPAREN .)
    FOR             reduce using rule 36 (factor -> INPUT LPAREN STRING RPAREN .)
    $end            reduce using rule 36 (factor -> INPUT LPAREN STRING RPAREN .)
    RBRACE          reduce using rule 36 (factor -> INPUT LPAREN STRING RPAREN .)
    RBRACKET        reduce using rule 36 (factor -> INPUT LPAREN STRING RPAREN .)
    LBRACE          reduce using rule 36 (factor -> INPUT LPAREN STRING RPAREN .)


state 69

    (11) statement -> WHILE condition LBRACE statementList RBRACE .

    PRINT           reduce using rule 11 (statement -> WHILE condition LBRACE statementList RBRACE .)
    ID              reduce using rule 11 (statement -> WHILE condition LBRACE statementList RBRACE .)
    IF              reduce using rule 11 (statement -> WHILE condition LBRACE statementList RBRACE .)
    WHILE           reduce using rule 11 (statement -> WHILE condition LBRACE statementList RBRACE .)
    FOR             reduce using rule 11 (statement -> WHILE condition LBRACE statementList RBRACE .)
    $end            reduce using rule 11 (statement -> WHILE condition LBRACE statementList RBRACE .)
    RBRACE          reduce using rule 11 (statement -> WHILE condition LBRACE statementList RBRACE .)


state 70

    (12) statement -> FOR ID IN ID LBRACE . statementList RBRACE
    (17) statementList -> . statement
    (18) statementList -> . statement statementList
    (5) statement -> . PRINT LPAREN STRING RPAREN
    (6) statement -> . PRINT LPAREN expression RPAREN
    (7) statement -> . PRINT LPAREN expression COMMA STRING COMMA expression RPAREN
    (8) statement -> . ID DOT APPEND LPAREN expression RPAREN
    (9) statement -> . ID EQUALS expression
    (10) statement -> . IF condition LBRACE statementList RBRACE statementIF
    (11) statement -> . WHILE condition LBRACE statementList RBRACE
    (12) statement -> . FOR ID IN ID LBRACE statementList RBRACE
    (13) statement -> . empty
    (40) empty -> .

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    PRINT           shift and go to state 5
    ID              shift and go to state 6
    IF              shift and go to state 7
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    RBRACE          reduce using rule 40 (empty -> .)

  ! PRINT           [ reduce using rule 40 (empty -> .) ]
  ! ID              [ reduce using rule 40 (empty -> .) ]
  ! IF              [ reduce using rule 40 (empty -> .) ]
  ! WHILE           [ reduce using rule 40 (empty -> .) ]
  ! FOR             [ reduce using rule 40 (empty -> .) ]

    statementList                  shift and go to state 78
    statement                      shift and go to state 4
    empty                          shift and go to state 10

state 71

    (7) statement -> PRINT LPAREN expression COMMA STRING COMMA . expression RPAREN
    (29) expression -> . term
    (31) term -> . factor
    (30) factor -> . ID DOT ISALPHA LPAREN RPAREN
    (32) factor -> . ID
    (33) factor -> . STRING
    (34) factor -> . LBRACKET elements RBRACKET
    (35) factor -> . LBRACKET RBRACKET
    (36) factor -> . INPUT LPAREN STRING RPAREN
    (37) factor -> . NUMBER
    (38) factor -> . FALSE
    (39) factor -> . TRUE

    ID              shift and go to state 19
    STRING          shift and go to state 20
    LBRACKET        shift and go to state 21
    INPUT           shift and go to state 22
    NUMBER          shift and go to state 23
    FALSE           shift and go to state 24
    TRUE            shift and go to state 25

    expression                     shift and go to state 79
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 72

    (8) statement -> ID DOT APPEND LPAREN expression RPAREN .

    PRINT           reduce using rule 8 (statement -> ID DOT APPEND LPAREN expression RPAREN .)
    ID              reduce using rule 8 (statement -> ID DOT APPEND LPAREN expression RPAREN .)
    IF              reduce using rule 8 (statement -> ID DOT APPEND LPAREN expression RPAREN .)
    WHILE           reduce using rule 8 (statement -> ID DOT APPEND LPAREN expression RPAREN .)
    FOR             reduce using rule 8 (statement -> ID DOT APPEND LPAREN expression RPAREN .)
    $end            reduce using rule 8 (statement -> ID DOT APPEND LPAREN expression RPAREN .)
    RBRACE          reduce using rule 8 (statement -> ID DOT APPEND LPAREN expression RPAREN .)


state 73

    (10) statement -> IF condition LBRACE statementList RBRACE statementIF .

    PRINT           reduce using rule 10 (statement -> IF condition LBRACE statementList RBRACE statementIF .)
    ID              reduce using rule 10 (statement -> IF condition LBRACE statementList RBRACE statementIF .)
    IF              reduce using rule 10 (statement -> IF condition LBRACE statementList RBRACE statementIF .)
    WHILE           reduce using rule 10 (statement -> IF condition LBRACE statementList RBRACE statementIF .)
    FOR             reduce using rule 10 (statement -> IF condition LBRACE statementList RBRACE statementIF .)
    $end            reduce using rule 10 (statement -> IF condition LBRACE statementList RBRACE statementIF .)
    RBRACE          reduce using rule 10 (statement -> IF condition LBRACE statementList RBRACE statementIF .)


state 74

    (14) statementIF -> ELSE . LBRACE statementList RBRACE
    (15) statementIF -> ELSE . IF condition LBRACE statementList RBRACE statementIF

    LBRACE          shift and go to state 80
    IF              shift and go to state 81


state 75

    (16) statementIF -> empty .

    PRINT           reduce using rule 16 (statementIF -> empty .)
    ID              reduce using rule 16 (statementIF -> empty .)
    IF              reduce using rule 16 (statementIF -> empty .)
    WHILE           reduce using rule 16 (statementIF -> empty .)
    FOR             reduce using rule 16 (statementIF -> empty .)
    $end            reduce using rule 16 (statementIF -> empty .)
    RBRACE          reduce using rule 16 (statementIF -> empty .)


state 76

    (20) condition -> expression relation expression relation expression . relation expression
    (21) relation -> . AND
    (22) relation -> . EQUALV
    (23) relation -> . NOTEQUALV
    (24) relation -> . LT
    (25) relation -> . GT
    (26) relation -> . LTE
    (27) relation -> . GTE
    (28) relation -> . NOT IN

    AND             shift and go to state 34
    EQUALV          shift and go to state 35
    NOTEQUALV       shift and go to state 36
    LT              shift and go to state 37
    GT              shift and go to state 38
    LTE             shift and go to state 39
    GTE             shift and go to state 40
    NOT             shift and go to state 41

    relation                       shift and go to state 82

state 77

    (30) factor -> ID DOT ISALPHA LPAREN RPAREN .

    AND             reduce using rule 30 (factor -> ID DOT ISALPHA LPAREN RPAREN .)
    EQUALV          reduce using rule 30 (factor -> ID DOT ISALPHA LPAREN RPAREN .)
    NOTEQUALV       reduce using rule 30 (factor -> ID DOT ISALPHA LPAREN RPAREN .)
    LT              reduce using rule 30 (factor -> ID DOT ISALPHA LPAREN RPAREN .)
    GT              reduce using rule 30 (factor -> ID DOT ISALPHA LPAREN RPAREN .)
    LTE             reduce using rule 30 (factor -> ID DOT ISALPHA LPAREN RPAREN .)
    GTE             reduce using rule 30 (factor -> ID DOT ISALPHA LPAREN RPAREN .)
    NOT             reduce using rule 30 (factor -> ID DOT ISALPHA LPAREN RPAREN .)
    RPAREN          reduce using rule 30 (factor -> ID DOT ISALPHA LPAREN RPAREN .)
    COMMA           reduce using rule 30 (factor -> ID DOT ISALPHA LPAREN RPAREN .)
    PRINT           reduce using rule 30 (factor -> ID DOT ISALPHA LPAREN RPAREN .)
    ID              reduce using rule 30 (factor -> ID DOT ISALPHA LPAREN RPAREN .)
    IF              reduce using rule 30 (factor -> ID DOT ISALPHA LPAREN RPAREN .)
    WHILE           reduce using rule 30 (factor -> ID DOT ISALPHA LPAREN RPAREN .)
    FOR             reduce using rule 30 (factor -> ID DOT ISALPHA LPAREN RPAREN .)
    $end            reduce using rule 30 (factor -> ID DOT ISALPHA LPAREN RPAREN .)
    RBRACE          reduce using rule 30 (factor -> ID DOT ISALPHA LPAREN RPAREN .)
    RBRACKET        reduce using rule 30 (factor -> ID DOT ISALPHA LPAREN RPAREN .)
    LBRACE          reduce using rule 30 (factor -> ID DOT ISALPHA LPAREN RPAREN .)


state 78

    (12) statement -> FOR ID IN ID LBRACE statementList . RBRACE

    RBRACE          shift and go to state 83


state 79

    (7) statement -> PRINT LPAREN expression COMMA STRING COMMA expression . RPAREN

    RPAREN          shift and go to state 84


state 80

    (14) statementIF -> ELSE LBRACE . statementList RBRACE
    (17) statementList -> . statement
    (18) statementList -> . statement statementList
    (5) statement -> . PRINT LPAREN STRING RPAREN
    (6) statement -> . PRINT LPAREN expression RPAREN
    (7) statement -> . PRINT LPAREN expression COMMA STRING COMMA expression RPAREN
    (8) statement -> . ID DOT APPEND LPAREN expression RPAREN
    (9) statement -> . ID EQUALS expression
    (10) statement -> . IF condition LBRACE statementList RBRACE statementIF
    (11) statement -> . WHILE condition LBRACE statementList RBRACE
    (12) statement -> . FOR ID IN ID LBRACE statementList RBRACE
    (13) statement -> . empty
    (40) empty -> .

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    PRINT           shift and go to state 5
    ID              shift and go to state 6
    IF              shift and go to state 7
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    RBRACE          reduce using rule 40 (empty -> .)

  ! PRINT           [ reduce using rule 40 (empty -> .) ]
  ! ID              [ reduce using rule 40 (empty -> .) ]
  ! IF              [ reduce using rule 40 (empty -> .) ]
  ! WHILE           [ reduce using rule 40 (empty -> .) ]
  ! FOR             [ reduce using rule 40 (empty -> .) ]

    statementList                  shift and go to state 85
    statement                      shift and go to state 4
    empty                          shift and go to state 10

state 81

    (15) statementIF -> ELSE IF . condition LBRACE statementList RBRACE statementIF
    (19) condition -> . expression relation expression
    (20) condition -> . expression relation expression relation expression relation expression
    (29) expression -> . term
    (31) term -> . factor
    (30) factor -> . ID DOT ISALPHA LPAREN RPAREN
    (32) factor -> . ID
    (33) factor -> . STRING
    (34) factor -> . LBRACKET elements RBRACKET
    (35) factor -> . LBRACKET RBRACKET
    (36) factor -> . INPUT LPAREN STRING RPAREN
    (37) factor -> . NUMBER
    (38) factor -> . FALSE
    (39) factor -> . TRUE

    ID              shift and go to state 19
    STRING          shift and go to state 20
    LBRACKET        shift and go to state 21
    INPUT           shift and go to state 22
    NUMBER          shift and go to state 23
    FALSE           shift and go to state 24
    TRUE            shift and go to state 25

    condition                      shift and go to state 86
    expression                     shift and go to state 16
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 82

    (20) condition -> expression relation expression relation expression relation . expression
    (29) expression -> . term
    (31) term -> . factor
    (30) factor -> . ID DOT ISALPHA LPAREN RPAREN
    (32) factor -> . ID
    (33) factor -> . STRING
    (34) factor -> . LBRACKET elements RBRACKET
    (35) factor -> . LBRACKET RBRACKET
    (36) factor -> . INPUT LPAREN STRING RPAREN
    (37) factor -> . NUMBER
    (38) factor -> . FALSE
    (39) factor -> . TRUE

    ID              shift and go to state 19
    STRING          shift and go to state 20
    LBRACKET        shift and go to state 21
    INPUT           shift and go to state 22
    NUMBER          shift and go to state 23
    FALSE           shift and go to state 24
    TRUE            shift and go to state 25

    expression                     shift and go to state 87
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 83

    (12) statement -> FOR ID IN ID LBRACE statementList RBRACE .

    PRINT           reduce using rule 12 (statement -> FOR ID IN ID LBRACE statementList RBRACE .)
    ID              reduce using rule 12 (statement -> FOR ID IN ID LBRACE statementList RBRACE .)
    IF              reduce using rule 12 (statement -> FOR ID IN ID LBRACE statementList RBRACE .)
    WHILE           reduce using rule 12 (statement -> FOR ID IN ID LBRACE statementList RBRACE .)
    FOR             reduce using rule 12 (statement -> FOR ID IN ID LBRACE statementList RBRACE .)
    $end            reduce using rule 12 (statement -> FOR ID IN ID LBRACE statementList RBRACE .)
    RBRACE          reduce using rule 12 (statement -> FOR ID IN ID LBRACE statementList RBRACE .)


state 84

    (7) statement -> PRINT LPAREN expression COMMA STRING COMMA expression RPAREN .

    PRINT           reduce using rule 7 (statement -> PRINT LPAREN expression COMMA STRING COMMA expression RPAREN .)
    ID              reduce using rule 7 (statement -> PRINT LPAREN expression COMMA STRING COMMA expression RPAREN .)
    IF              reduce using rule 7 (statement -> PRINT LPAREN expression COMMA STRING COMMA expression RPAREN .)
    WHILE           reduce using rule 7 (statement -> PRINT LPAREN expression COMMA STRING COMMA expression RPAREN .)
    FOR             reduce using rule 7 (statement -> PRINT LPAREN expression COMMA STRING COMMA expression RPAREN .)
    $end            reduce using rule 7 (statement -> PRINT LPAREN expression COMMA STRING COMMA expression RPAREN .)
    RBRACE          reduce using rule 7 (statement -> PRINT LPAREN expression COMMA STRING COMMA expression RPAREN .)


state 85

    (14) statementIF -> ELSE LBRACE statementList . RBRACE

    RBRACE          shift and go to state 88


state 86

    (15) statementIF -> ELSE IF condition . LBRACE statementList RBRACE statementIF

    LBRACE          shift and go to state 89


state 87

    (20) condition -> expression relation expression relation expression relation expression .

    LBRACE          reduce using rule 20 (condition -> expression relation expression relation expression relation expression .)


state 88

    (14) statementIF -> ELSE LBRACE statementList RBRACE .

    PRINT           reduce using rule 14 (statementIF -> ELSE LBRACE statementList RBRACE .)
    ID              reduce using rule 14 (statementIF -> ELSE LBRACE statementList RBRACE .)
    IF              reduce using rule 14 (statementIF -> ELSE LBRACE statementList RBRACE .)
    WHILE           reduce using rule 14 (statementIF -> ELSE LBRACE statementList RBRACE .)
    FOR             reduce using rule 14 (statementIF -> ELSE LBRACE statementList RBRACE .)
    $end            reduce using rule 14 (statementIF -> ELSE LBRACE statementList RBRACE .)
    RBRACE          reduce using rule 14 (statementIF -> ELSE LBRACE statementList RBRACE .)


state 89

    (15) statementIF -> ELSE IF condition LBRACE . statementList RBRACE statementIF
    (17) statementList -> . statement
    (18) statementList -> . statement statementList
    (5) statement -> . PRINT LPAREN STRING RPAREN
    (6) statement -> . PRINT LPAREN expression RPAREN
    (7) statement -> . PRINT LPAREN expression COMMA STRING COMMA expression RPAREN
    (8) statement -> . ID DOT APPEND LPAREN expression RPAREN
    (9) statement -> . ID EQUALS expression
    (10) statement -> . IF condition LBRACE statementList RBRACE statementIF
    (11) statement -> . WHILE condition LBRACE statementList RBRACE
    (12) statement -> . FOR ID IN ID LBRACE statementList RBRACE
    (13) statement -> . empty
    (40) empty -> .

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    PRINT           shift and go to state 5
    ID              shift and go to state 6
    IF              shift and go to state 7
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    RBRACE          reduce using rule 40 (empty -> .)

  ! PRINT           [ reduce using rule 40 (empty -> .) ]
  ! ID              [ reduce using rule 40 (empty -> .) ]
  ! IF              [ reduce using rule 40 (empty -> .) ]
  ! WHILE           [ reduce using rule 40 (empty -> .) ]
  ! FOR             [ reduce using rule 40 (empty -> .) ]

    statementList                  shift and go to state 90
    statement                      shift and go to state 4
    empty                          shift and go to state 10

state 90

    (15) statementIF -> ELSE IF condition LBRACE statementList . RBRACE statementIF

    RBRACE          shift and go to state 91


state 91

    (15) statementIF -> ELSE IF condition LBRACE statementList RBRACE . statementIF
    (14) statementIF -> . ELSE LBRACE statementList RBRACE
    (15) statementIF -> . ELSE IF condition LBRACE statementList RBRACE statementIF
    (16) statementIF -> . empty
    (40) empty -> .

    ELSE            shift and go to state 74
    PRINT           reduce using rule 40 (empty -> .)
    ID              reduce using rule 40 (empty -> .)
    IF              reduce using rule 40 (empty -> .)
    WHILE           reduce using rule 40 (empty -> .)
    FOR             reduce using rule 40 (empty -> .)
    $end            reduce using rule 40 (empty -> .)
    RBRACE          reduce using rule 40 (empty -> .)

    statementIF                    shift and go to state 92
    empty                          shift and go to state 75

state 92

    (15) statementIF -> ELSE IF condition LBRACE statementList RBRACE statementIF .

    PRINT           reduce using rule 15 (statementIF -> ELSE IF condition LBRACE statementList RBRACE statementIF .)
    ID              reduce using rule 15 (statementIF -> ELSE IF condition LBRACE statementList RBRACE statementIF .)
    IF              reduce using rule 15 (statementIF -> ELSE IF condition LBRACE statementList RBRACE statementIF .)
    WHILE           reduce using rule 15 (statementIF -> ELSE IF condition LBRACE statementList RBRACE statementIF .)
    FOR             reduce using rule 15 (statementIF -> ELSE IF condition LBRACE statementList RBRACE statementIF .)
    $end            reduce using rule 15 (statementIF -> ELSE IF condition LBRACE statementList RBRACE statementIF .)
    RBRACE          reduce using rule 15 (statementIF -> ELSE IF condition LBRACE statementList RBRACE statementIF .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PRINT in state 0 resolved as shift
WARNING: shift/reduce conflict for ID in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 4 resolved as shift
WARNING: shift/reduce conflict for ID in state 4 resolved as shift
WARNING: shift/reduce conflict for IF in state 4 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 4 resolved as shift
WARNING: shift/reduce conflict for FOR in state 4 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 28 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 32 resolved as shift
WARNING: shift/reduce conflict for ID in state 32 resolved as shift
WARNING: shift/reduce conflict for IF in state 32 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 32 resolved as shift
WARNING: shift/reduce conflict for FOR in state 32 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 47 resolved as shift
WARNING: shift/reduce conflict for ID in state 47 resolved as shift
WARNING: shift/reduce conflict for IF in state 47 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 47 resolved as shift
WARNING: shift/reduce conflict for FOR in state 47 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 70 resolved as shift
WARNING: shift/reduce conflict for ID in state 70 resolved as shift
WARNING: shift/reduce conflict for IF in state 70 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 70 resolved as shift
WARNING: shift/reduce conflict for FOR in state 70 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 80 resolved as shift
WARNING: shift/reduce conflict for ID in state 80 resolved as shift
WARNING: shift/reduce conflict for IF in state 80 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 80 resolved as shift
WARNING: shift/reduce conflict for FOR in state 80 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 89 resolved as shift
WARNING: shift/reduce conflict for ID in state 89 resolved as shift
WARNING: shift/reduce conflict for IF in state 89 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 89 resolved as shift
WARNING: shift/reduce conflict for FOR in state 89 resolved as shift
WARNING: reduce/reduce conflict in state 4 resolved using rule (statementList -> statement)
WARNING: rejected rule (empty -> <empty>) in state 4
